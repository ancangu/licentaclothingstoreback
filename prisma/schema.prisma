generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articles {
  articleid          Int                @id @unique(map: "articleid_UNIQUE") @default(autoincrement())
  displayname        String             @unique(map: "displayname_UNIQUE") @db.VarChar(255)
  internalname       String             @unique(map: "internalname_UNIQUE") @db.VarChar(255)
  price              Int
  releasedate        DateTime           @db.DateTime(0)
  sex                String             @db.VarChar(12)
  categoryid         Int
  description        String             @db.VarChar(5000)
  categorydictionary categorydictionary @relation(fields: [categoryid], references: [categoryid], onDelete: NoAction, onUpdate: NoAction, map: "FK_categoryid")
  articlesxstock     articlesxstock[]
  wishlistarticles   wishlistarticles[]

  @@index([categoryid], map: "FK_categoryid_idx")
}

model articlesxstock {
  articleid     Int
  size          String   @db.VarChar(45)
  remainingqtty String   @db.VarChar(45)
  id            Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  articles      articles @relation(fields: [articleid], references: [articleid], onDelete: NoAction, onUpdate: NoAction, map: "FK_articleid")

  @@index([articleid], map: "FK_articleid_idx")
}

model categorydictionary {
  categoryid   Int        @id @unique(map: "categoryid_UNIQUE")
  categoryname String     @unique(map: "categoryname_UNIQUE") @db.VarChar(45)
  articles     articles[]
}

model city {
  cityid     Int       @id @unique(map: "cityid_UNIQUE")
  cityname   String    @db.VarChar(45)
  districtid Int
  districts  districts @relation(fields: [districtid], references: [districtid], onDelete: NoAction, onUpdate: NoAction, map: "FK_districtid")

  @@index([districtid], map: "FK_districtid_idx")
}

model districts {
  districtid   Int    @id @unique(map: "districtid_UNIQUE")
  districtname String @unique(map: "districtname_UNIQUE") @db.VarChar(45)
  city         city[]
}

model userinfo {
  userid     Int     @unique(map: "userid_UNIQUE")
  districtid Int?
  cityid     Int?
  street     String? @db.VarChar(255)
  apartament String? @db.VarChar(255)
  bloc       String? @db.VarChar(255)
  etaj       String? @db.VarChar(255)
  firstname  String? @db.VarChar(255)
  lastname   String? @db.VarChar(45)
  users      users   @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "FK_userid")
}

model users {
  userid           Int                @id @unique(map: "userid_UNIQUE") @default(autoincrement())
  email            String             @unique(map: "email_UNIQUE") @db.VarChar(255)
  password         String             @db.VarChar(500)
  token            String?            @unique(map: "token_UNIQUE") @db.VarChar(255)
  userinfo         userinfo?
  wishlistarticles wishlistarticles[]
}

model wishlistarticles {
  articleid Int
  userid    Int
  articles  articles @relation(fields: [articleid], references: [articleid], onDelete: NoAction, onUpdate: NoAction, map: "FK_articleidwishlist")
  users     users    @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "FK_useridwishlist")

  @@id([articleid, userid])
  @@index([userid], map: "FK_useridwishlist_idx")
}
